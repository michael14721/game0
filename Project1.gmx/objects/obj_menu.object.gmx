<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu[0, 0] = "New game";
menu[0, 1] = "Save slot 1";
menu[0, 2] = "Save slot 2";
menu[0, 3] = "Save slot 3";
menu[0, 4] = "Back";

menu[1, 0] = "Load";
menu[1, 1] = "Save slot 1";
menu[1, 2] = "Save slot 2";
menu[1, 3] = "Save slot 3";
menu[1, 4] = "Back";

menu[2, 0] = "Options";
menu[2, 1] = "Back";

menu[3, 0] = "Credits";
menu[3, 1] = "Made by Hum3, KaNt# and D35CART35."
menu[3, 2] = "Back";

menu[4, 0] = "Exit";

item_total = array_height_2d(menu);

top = 224;
bot = room_height - 64;
dist = (bot - top) / item_total;

active = -1;
stack = ds_stack_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_menu);
draw_set_color(c_black);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

// Draw entire menu
if (ds_stack_size(stack) == 0) {
    // Draw primary menu
    for (i = 0; i &lt; item_total; i ++;) {
        draw_set_alpha(0.5);
        var w = string_width(menu[i, 0]) * 0.5;
        var h = string_height(menu[i, 0]) * 0.5;
        draw_rectangle(room_width * 0.5 - w, top + (i * dist) - h, room_width * 0.5 + w, top + (i * dist) + h, false);
        
        var a = scr_inside_box(mouse_x, mouse_y, room_width * 0.5 - w, top + (i * dist) - h, w * 2, h * 2);
        if (a == true &amp;&amp; mouse_check_button_released(mb_left)) {
            switch (i) {
                case 0: {
                    ds_stack_push(stack, i);
                } break;
                case 1: {
                    ds_stack_push(stack, i);
                } break;
                case 2: {
                    ds_stack_push(stack, i);
                } break;
                case 3: {
                    ds_stack_push(stack, i);
                } break;
                case 4: {
                    show_debug_message("Exit");
                    //game_end();
                } break;
            }
        }
        
        draw_set_alpha(0.5 + a * 0.5);
        draw_text(room_width * 0.5, top + (i * dist), menu[i, 0]);
    }
} else {
    // Draw all the other menus
    var l = array_length_2d(menu, ds_stack_top(stack));
    for (i = 1; i &lt; l; i ++;) {
        draw_set_alpha(0.5);
        var w = string_width(menu[ds_stack_top(stack), i]) * 0.5;
        var h = string_height(menu[ds_stack_top(stack), i]) * 0.5;
        draw_rectangle(room_width * 0.5 - w, top + (i * dist) - h - dist, room_width * 0.5 + w, top + (i * dist) + h - dist, false);
        
        var a = scr_inside_box(mouse_x, mouse_y, room_width * 0.5 - w, top + (i * dist) - h - dist, w * 2, h * 2);
        if (a == true &amp;&amp; mouse_check_button_released(mb_left)) {
            switch (ds_stack_top(stack)) {
                case 0: {
                    switch (i) {
                        case 1: {} break;
                        case 2: {} break;
                        case 3: {} break;
                        case 4: {
                            ds_stack_pop(stack);
                        } break;
                    }
                } break;
                case 1: {
                    switch (i) {
                        case 1: {} break;
                        case 2: {} break;
                        case 3: {} break;
                        case 4: {
                            ds_stack_pop(stack);
                        } break;
                    }
                } break;
                case 2: {
                    switch (i) {
                        case 1: {
                            ds_stack_pop(stack);
                        } break;
                    }
                } break;
                case 3: {
                    switch (i) {
                        case 2: {
                            ds_stack_pop(stack);
                        } break;
                    }
                } break;
                default: {} break;
            }
        }
        
        draw_set_alpha(0.5 + a * 0.5);
        draw_text(room_width * 0.5, top + (i * dist) - dist, menu[ds_stack_top(stack), i]);
    }
}

// Draw grid
draw_set_color(c_black);
var a = 32;
draw_set_alpha(0.1);
for (i = 0; i &lt; room_width div a; i ++) {
    draw_line(i * a, 0, i * a, room_height);
}

for (i = 0; i &lt; room_height div a; i ++) {
    draw_line(0, i * a, room_width, i * a);
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_stack_pop(stack);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
