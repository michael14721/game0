<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize everything

// Initialize view/screen shake
scr_view_init();
intensity = 16;
time = 0;

// Snap to grid when spawned
move_snap(32, 32);
x += 16;

// Sprite animation
image_speed = 0;
ani_start = 0;
ani_end = 0;

// Store keys to variables
k_right = ord("D");
k_left = ord("A");
k_up = ord("W");
k_down = ord("S");

// Movement variables
can_move = true;
spd = 4;

// Internal variables
dir_x = 0;
dir_y = 0;
move = false;
moving = false;
dir = 0;
px = x;
py = y;

/*
hspd = 0;
vspd = 0;
max_hspd = 3;
max_vspd = 3;
acc = 1;
fric = 0.2;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define view point and limit
var xx, yy, a, b;
a = view_wview * 0.5;
b = view_hview * 0.5;
xx = median(x - a, 0, room_width - a * 2);
yy = median(y - b, 0, room_height - b * 2);

scr_view_step(xx, yy, -1, intensity, time);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cycle sub-images
if (move == true) {
    if (image_index &lt; ani_start || round(image_index) &gt; ani_end) {
        image_index = ani_start;
    } else {
        image_index += 10 / room_speed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deactivate instances outside view
var pad = 64;

instance_deactivate_all(true);
instance_activate_region(view_xview - pad, view_yview - pad, view_wview + pad * 2, view_hview + pad * 2, true);
instance_activate_object(obj_c);
instance_activate_object(obj_transition);
instance_activate_object(obj_background);
instance_activate_object(obj_light);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and animation

if (can_move == true) {
    // Get direction
    dir_x = (keyboard_check(k_right) - keyboard_check(k_left));
    dir_y = (keyboard_check(k_down) - keyboard_check(k_up));
    
    if (keyboard_check_pressed(k_right)) {
        dir = 0;
        move = true;
    }
    
    if (keyboard_check_pressed(k_up)) {
        dir = 90;
        move = true;
    }
    
    if (keyboard_check_pressed(k_left)) {
        dir = 180;
        move = true;
    }
    
    if (keyboard_check_pressed(k_down)) {
        dir = 270;
        move = true;
    }
    
    // Flawless movement
    if (dir_x == 0 &amp;&amp; dir_y != 0) {
        dir = dir_y * 90 + 180;
        move = true;
    }
    
    if (dir_x != 0 &amp;&amp; dir_y == 0) {
        dir = -(dir_x * 90 - 90);
        move = true;
    }
    
    // No input -&gt; stop
    if (dir_x == 0 &amp;&amp; dir_y == 0) {
        move = false;
        moving = false;
    }
    
    // Move px and py
    if (move = true) {
        if (moving == false) {
            alarm[0] = 0.15 * room_speed;
            moving = true;
        }
        
        if (alarm[0] &lt; 0 &amp;&amp; x == px &amp;&amp; y == py) {
            if (!place_meeting(x + dir_x * 32, y, par_solid)) {
                px += lengthdir_x(1, dir) * 32;
            }
            
            if (!place_meeting(x, y + dir_y * 32, par_solid)) {
                py += lengthdir_y(1, dir) * 32;
            }
        }
    }
}
// Move player
motion_set(point_direction(x, y, px, py), min(spd, point_distance(x, y, px, py)));

// Animation
var d = point_direction(x, y, px, py) / 90 * 4;
ani_start = d;
ani_end = d + 3;

if (x == px &amp;&amp; y == py) {
    image_index = (dir / 90) * 4;
    ani_start = image_index;
    ani_end = image_index;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sort depth
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free movement (not used)
/*
if (dir_x == 0) {
    hspd -= fric * sign(hspd);
} else {
    hspd = median(-max_hspd, hspd + (acc * sign(dir_x)), max_hspd);
}

repeat ceil(abs(hspd)) {
    if (!place_meeting(x + sign(hspd), y, par_solid)) {
        x += sign(hspd);
    } else {
        hspd = 0;
    }
}

if (dir_y == 0) {
    vspd -= fric * sign(vspd);
} else {
    vspd = median(-max_vspd, vspd + (acc * sign(dir_y)), max_vspd);
}

repeat ceil(abs(vspd)) {
    if (!place_meeting(x, y + sign(vspd), par_solid)) {
        y += sign(vspd);
    } else {
        vspd = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug info

draw_self();

/*
draw_set_alpha(1);
draw_set_color(c_red);
draw_circle(px, py, 5, false)

draw_text(x, y, string(dir_x) + ", " + string(dir_y));
draw_text(x, y + 16, string(dir));
draw_text(x, y + 32, string(image_index));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interact
if (can_move == false) {
    exit;
}

var a = instance_place(x + lengthdir_x(1, dir), y + lengthdir_y(1, dir), par_solid);
if (a &gt; 0) {
    switch (a.object_index) {
        case obj_npc_lady: {
            can_move = false;
            with (a) {
                // Turn her around
                image_index = (other.dir / 90) + 2;
                event_user(0);
            }
        } break;
        
        case obj_save: {
            can_move = false;
            with (a) {
                event_user(0);
            }
        }
        
        default : {
            // Do nothing
        } break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
